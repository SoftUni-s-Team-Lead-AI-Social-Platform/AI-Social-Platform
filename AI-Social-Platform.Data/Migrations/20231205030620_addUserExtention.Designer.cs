// <auto-generated />
using System;
using AI_Social_Platform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AI_Social_Platform.Data.Migrations
{
    [DbContext(typeof(ASPDbContext))]
    [Migration("20231205030620_addUserExtention")]
    partial class addUserExtention
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<byte[]>("CoverPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("Test");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("Test");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Relationship")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2005, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9d335c5a-4941-48fe-a873-0d528e84f437",
                            CountryId = 1,
                            CoverPhoto = new byte[] { 81, 225, 91, 188, 167, 95, 252, 201, 213, 67, 133, 26, 119, 214, 254, 19, 208, 210, 191, 46, 140, 38, 254, 4, 49, 219, 25, 105, 16, 18, 130, 150, 148, 7, 181, 248, 226, 138, 54, 204, 202, 156, 199, 19, 130, 177, 223, 139, 92, 109, 145, 112, 136, 97, 148, 71, 37, 248, 58, 152, 91, 23, 106, 131, 148, 195, 145, 184, 87, 106, 102, 191, 68, 108, 115, 212, 155, 133, 25, 69, 134, 156, 104, 251, 103, 253, 52, 71, 53, 142, 68, 242, 158, 25, 173, 82, 14, 46, 247, 245, 14, 60, 115, 50, 104, 237, 141, 185, 5, 157, 230, 138, 21, 164, 83, 179, 192, 135, 19, 248, 161, 92, 72, 160, 205, 30, 179, 158, 79, 251, 159, 86, 138, 239, 61, 101, 136, 168, 41, 152, 28, 22, 34, 188, 136, 130, 228, 130, 174, 55, 117, 174, 61, 146, 216, 31, 153, 138, 168, 91, 233, 170, 147, 15, 26, 144, 238, 68, 139, 41, 84, 200, 31, 189, 95, 158, 31, 188, 88, 55, 83, 120, 209, 70, 99, 3, 126, 56, 161, 37, 249, 255, 164, 127, 3, 212, 8, 151, 196, 115, 72, 14, 178, 107, 135, 62, 65, 0, 37, 66, 154, 155, 114, 129, 4, 164, 244, 26, 181, 152, 203, 197, 231, 51, 111, 120, 236, 63, 245, 120, 165, 226, 248, 187, 147, 19, 49, 51, 230, 55, 83, 138, 75, 109, 129, 254, 146, 130, 114, 191, 190, 138, 173, 166, 36, 32, 217, 25, 134, 102, 223, 87, 49, 239, 207, 165, 175, 183, 45, 47, 253, 103, 57, 231, 4, 217, 129, 237, 23, 93, 163, 4, 128, 198, 248, 182, 124, 206, 248, 126, 247, 229, 141, 112, 135, 17, 171, 170, 45, 108, 100, 218, 165, 175, 130, 54, 169, 4, 37, 40, 117, 222, 94, 131, 244, 4, 176, 31, 66, 53, 1, 127, 38, 126, 49, 163, 67, 157, 26, 252, 104, 134, 78, 58, 105, 179, 51, 223, 201, 238, 129, 238, 80, 80, 42, 39, 241, 173, 179, 76, 169, 247, 176, 108, 94, 198, 202, 183, 26, 153, 221, 23, 142, 201, 67, 107, 12, 114, 98, 234, 253, 89, 55, 11, 158, 243, 2, 8, 160, 114, 160, 21, 24, 6, 124, 24, 0, 212, 33, 199, 35, 39, 12, 167, 165, 197, 150, 189, 33, 169, 217, 91, 90, 119, 35, 170, 56, 43, 37, 83, 183, 195, 160, 45, 244, 60, 205, 147, 139, 134, 107, 255, 46, 212, 66, 41, 252, 135, 241, 124, 67, 135, 59, 209, 237, 53, 182, 28, 57, 143, 251, 197, 32, 116, 64, 55, 217, 166, 152, 208, 211, 136, 25, 132, 181, 65, 226, 116, 146, 56, 112, 49, 244, 112, 224, 86, 133, 34, 83, 68, 174, 148, 96, 103, 49, 150, 53, 10, 115, 7, 166, 107, 66, 219, 118, 200, 75, 107, 162, 51, 19, 130, 152, 191, 16, 129, 141, 10, 160, 51, 189, 92, 229, 188, 152, 251, 18, 52, 23, 189, 69, 250, 125, 244, 65, 115, 202, 126, 218, 87, 177, 30, 64, 3, 63, 229, 204, 106, 101, 142, 132, 64, 189, 178, 131, 64, 218, 182, 173, 165, 208, 14, 171, 237, 202, 23, 252, 167, 175, 37, 97, 59, 116, 180, 103, 250, 225, 148, 222, 59, 189, 49, 26, 114, 23, 55, 165, 217, 173, 70, 149, 244, 145, 10, 171, 30, 246, 60, 207, 190, 28, 234, 241, 111, 52, 234, 46, 191, 108, 24, 60, 49, 91, 105, 14, 45, 77, 129, 184, 213, 130, 51, 66, 202, 156, 115, 111, 82, 190, 191, 36, 5, 25, 112, 164, 194, 56, 187, 224, 59, 199, 67, 54, 90, 17, 189, 133, 58, 60, 15, 43, 186, 144, 124, 106, 75, 171, 179, 46, 200, 89, 195, 72, 186, 121, 79, 249, 84, 210, 172, 218, 233, 214, 195, 34, 8, 116, 16, 118, 30, 93, 169, 27, 96, 155, 78, 83, 106, 39, 242, 85, 134, 144, 119, 218, 48, 182, 248, 133, 167, 250, 132, 219, 25, 135, 31, 128, 86, 165, 139, 253, 216, 254, 166, 47, 30, 95, 229, 84, 82, 162, 161, 235, 87, 146, 160, 175, 187, 35, 124, 233, 77, 56, 227, 191, 31, 216, 18, 200, 223, 197, 36, 247, 255, 158, 43, 126, 19, 75, 144, 40, 171, 24, 151, 146, 54, 194, 0, 137, 254, 65, 252, 100, 255, 9, 26, 98, 216, 239, 220, 86, 163, 92, 245, 232, 182, 37, 148, 227, 5, 14, 6, 23, 29, 20, 96, 114, 122, 9, 239, 196, 11, 104, 171, 182, 168, 171, 243, 206, 133, 129, 212, 205, 69, 99, 163, 9, 86, 120, 201, 173, 223, 157, 64, 17, 170, 112, 79, 132, 192, 3, 186, 41, 60, 17, 8, 100, 140, 185, 105, 142, 116, 125, 222, 5, 198, 44, 243, 8, 66, 222, 183, 85, 170, 103, 67, 90, 7, 127, 172, 246, 249, 203, 183, 27, 30, 88, 146, 17, 220, 48, 23, 140, 12, 132, 153, 61, 131, 11, 66, 219, 104, 196, 6, 66, 81, 146, 166, 51, 93, 0, 231, 255, 132, 130, 89, 15, 172, 142, 248, 240, 210, 71, 94, 2, 196, 132, 205, 49, 60, 110, 88, 252, 237, 229, 194, 217, 70, 165, 2, 65, 174, 110, 214, 0, 101, 89, 47, 208, 38, 51, 137, 211, 4, 216, 113, 55, 154, 7, 138, 15, 165, 228, 6, 249, 16, 182, 222, 165, 82, 45, 69, 28, 5, 233, 192, 226, 213, 177, 226, 201, 237, 226, 75, 127, 51, 15, 206, 192, 3, 226, 230, 120, 95, 176, 140, 176, 167, 231, 199, 72, 156, 122, 134, 76, 105, 90, 170, 131, 12, 81, 75, 246, 158, 21, 0, 118, 56, 173, 78, 231, 174, 165, 215, 203, 7, 130, 11, 66, 38, 135, 54, 126, 137, 148, 85, 53, 145, 47, 117, 126, 143, 182, 203, 168, 147, 89, 189, 40, 114, 162, 234, 179, 237, 38, 220, 16, 232, 90, 36, 6, 125, 36, 84, 160, 190, 192, 52, 133, 220, 176, 194, 86, 217, 139, 244, 141, 40, 133, 79, 53, 79, 109, 2, 66, 139, 90, 162, 180, 180, 129, 157, 207, 212, 118, 67, 212, 222, 30, 176, 162, 115, 183, 160, 21, 81, 244, 231, 179, 166, 241, 251, 199, 161, 202, 20, 84, 43, 40, 96, 247, 32, 12, 228, 126, 240, 102, 245, 184, 231, 237, 150, 101, 164, 114, 164, 32, 67, 46, 128, 227, 236, 23, 109, 132, 34, 14, 15, 189, 142, 241, 220, 205, 233, 50, 16, 137, 221, 123, 34, 177, 89, 64, 207, 57, 26, 252, 180, 113, 65, 226, 254, 29, 18, 83, 30, 15, 59, 108, 57, 205, 213, 161, 31, 241, 69, 246, 219, 5, 144, 162, 23, 114, 138, 225, 13, 244, 53, 210, 165, 53, 159, 177, 27, 22, 16, 226, 128, 147, 124, 53, 166, 162, 230, 156, 89, 66, 3, 217, 142, 25, 14, 175, 174, 44, 187, 159, 221, 228, 134, 81, 75, 188, 174, 147, 235, 237, 127, 234, 51, 123, 56, 237, 16, 1, 250, 196, 106, 99, 34, 56, 175, 153, 5, 248, 103, 197, 45, 239, 20, 70, 239, 80, 99, 41, 63, 207, 152, 159, 21, 253, 99, 53, 225, 235, 148, 133, 184, 58, 157, 128, 250, 170, 188, 132, 22, 44, 247, 81, 80, 184, 191, 249, 208, 102, 193, 241, 233, 182, 137, 46, 58, 151, 244, 40, 96, 246, 220, 206, 127, 171, 254, 61, 8, 13, 203, 229, 187, 162, 35, 242, 56, 18, 55, 182, 167, 150, 170, 6, 89, 55, 83, 117, 44, 246, 214, 77, 125, 229, 154, 26, 125, 50, 27, 75, 68, 179, 32, 243, 73, 230, 251, 118, 170, 161, 208, 58, 137, 14, 36, 196, 93, 55, 107, 204, 27, 151, 24, 46, 146, 7, 76, 199, 131, 67, 75, 103, 15, 51, 127, 71, 247, 215, 62, 36, 2, 150, 91, 210, 251, 101, 26, 72, 97, 87, 234, 170, 97, 22, 214, 115, 196, 105, 120, 70, 46, 54, 80, 112, 231, 64, 164, 152, 36, 73, 133, 234, 246, 142, 186, 176, 169, 206, 66, 57, 40, 112, 20, 4, 178, 18, 45, 47, 160, 184, 64, 183, 10, 95, 1, 118, 153, 37, 176, 203, 223, 149, 188, 7, 55, 54, 70, 55, 166, 7, 86, 23, 220, 79, 190, 9, 93, 123, 38, 13, 170, 14, 59, 248, 225, 93, 90, 124, 240, 46, 121, 29, 214, 171, 249, 6, 175, 207, 135, 246, 83, 168, 217, 226, 97, 209, 78, 174, 129, 71, 28, 1, 52, 216, 93, 91, 99, 162, 180, 222, 194, 212, 64, 235, 103, 73, 237, 229, 249, 40, 93, 48, 51, 208, 191, 152, 62, 179, 167, 0, 95, 245, 38, 183, 191, 206, 25, 150, 193, 86, 126, 177, 62, 127, 114, 244, 143, 177, 120, 84, 47, 155, 169, 115, 230, 13, 78, 13, 135, 3, 197, 121, 115, 49, 87, 193, 167, 62, 91, 95, 77, 160, 50, 38, 71, 33, 119, 73, 162, 29, 66, 220, 214, 80, 75, 10, 10, 99, 150, 123, 17, 102, 41, 235, 225, 31, 36, 23, 248, 110, 141, 120, 33, 121, 14, 253, 11, 101, 7, 170, 5, 28, 78, 115, 241, 99, 37, 23, 124, 11, 181, 248, 13, 11, 73, 38, 195, 148, 79, 42, 160, 83, 229, 234, 215, 222, 254, 74, 28, 150, 78, 130, 251, 207, 31, 225, 43, 135, 178, 102, 25, 96, 250, 244, 197, 76, 104, 175, 169, 82, 82, 194, 166, 39, 119, 126, 202, 108, 255, 144, 47, 65, 50, 68, 78, 33, 41, 86, 54, 4, 211, 26, 155, 199, 44, 134, 119, 162, 48, 89, 228, 181, 158, 251, 22, 129, 71, 138, 59, 242, 189, 97, 157, 240, 169, 33, 231, 146, 9, 199, 92, 21, 140, 147, 138, 8, 48, 179, 87, 204, 250, 42, 89, 211, 23, 48, 100, 5, 239, 96, 214, 165, 118, 213, 142, 79, 108, 22, 176, 241, 54, 112, 104, 75, 25, 71, 68, 126, 82, 192, 37, 247, 2, 93, 192, 77, 162, 119, 115, 247, 136, 90, 119, 244, 144, 107, 164, 210, 1, 184, 144, 183, 44, 149, 5, 156, 10, 91, 36, 89, 148, 101, 91, 133, 168, 204, 254, 130, 28, 30, 219, 149, 145, 89, 50, 244, 106, 98, 167, 121, 66, 58, 84, 167, 185, 161, 80, 218, 198, 180, 99, 250, 9, 0, 63, 234, 7, 44, 49, 168, 18, 163, 82, 60, 170, 12, 197, 233, 229, 98, 185, 151, 219, 166, 132, 86, 239, 22, 244, 41, 108, 145, 65, 36, 193, 163, 137, 92, 10, 241, 1, 2, 199, 223, 95, 93, 47, 249, 93, 105, 74, 232, 85, 175, 14, 48, 128, 128, 219, 144, 253, 34, 135, 55, 82, 2, 145, 141, 17, 0, 14, 170, 195, 35, 60, 214, 87, 189, 47, 29, 56, 133, 166, 246, 173, 25, 15, 250, 235, 157, 6, 212, 52, 166, 237, 214, 6, 224, 119, 36, 88, 248, 100, 86, 19, 95, 200, 96, 231, 203, 234, 76, 17, 30, 191, 38, 75, 117, 139, 83, 179, 108, 173, 145, 124, 31, 208, 151, 158, 50, 130, 79, 13, 153, 252, 124, 170, 255, 12, 31, 180, 47, 138, 17, 113, 92, 118, 27, 117, 115, 194, 34, 234, 129, 14, 70, 35, 34, 147, 254, 140, 111, 167, 79, 160, 182, 20, 95, 249, 93, 99, 228, 166, 194, 130, 0, 64, 243, 80, 107, 126, 200, 244, 12, 91, 88, 115, 102, 217, 164, 98, 2, 192, 126, 32, 82, 164, 184, 211, 231, 187, 231, 91, 195, 121, 88, 220, 34, 19, 122, 87, 177, 101, 16, 227, 56, 13, 0, 125, 89, 206, 13, 40, 227, 34, 32, 232, 220, 46, 87, 225, 237, 191, 228, 85, 10, 189, 232, 25, 179, 187, 19, 93, 122, 37, 155, 163, 227, 222, 234, 35, 154, 122, 201, 180, 55, 204, 156, 193, 214, 158, 156, 9, 100, 114, 198, 119, 17, 104, 232, 171, 131, 214, 184, 207, 43, 248, 20, 94, 44, 47, 214, 234, 187, 231, 186, 14, 97, 251, 168, 244, 106, 122 },
                            Email = "user@user.com",
                            EmailConfirmed = false,
                            FirstName = "Georgi",
                            Gender = 0,
                            IsActive = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "user@user.com",
                            NormalizedUserName = "USER@USER.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELOga5SVbvqzqKzoLvwPO4RU+jeLWRZMdZDEffZUfZtRD8KuLwpYNjd6I5RTAUItkw==",
                            PhoneNumber = "0888555666",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[] { 148, 170, 131, 109, 61, 64, 89, 192, 49, 56, 109, 212, 123, 247, 224, 111, 98, 169, 189, 226, 213, 69, 73, 118, 178, 186, 223, 93, 122, 114, 68, 139, 155, 106, 36, 10, 16, 238, 174, 175, 26, 159, 132, 48, 114, 238, 214, 160, 205, 60, 65, 99, 73, 230, 85, 128, 91, 73, 65, 220, 210, 239, 87, 94, 214, 232, 102, 212, 197, 102, 242, 22, 132, 95, 140, 6, 163, 65, 174, 117, 15, 251, 127, 188, 202, 223, 48, 50, 128, 229, 43, 30, 51, 186, 219, 169, 81, 185, 52, 248, 146, 105, 189, 103, 31, 113, 146, 102, 50, 4, 240, 14, 72, 58, 162, 200, 86, 131, 64, 168, 230, 113, 82, 146, 210, 30, 87, 61, 81, 232, 122, 146, 82, 244, 243, 74, 255, 144, 44, 71, 203, 234, 178, 4, 83, 16, 164, 86, 227, 73, 197, 134, 127, 131, 105, 160, 249, 106, 51, 246, 99, 33, 36, 150, 101, 99, 131, 233, 250, 11, 216, 202, 78, 127, 55, 148, 139, 100, 116, 56, 44, 0, 16, 38, 169, 49, 101, 224, 79, 182, 80, 58, 137, 88, 217, 39, 140, 226, 77, 225, 169, 55, 224, 244, 251, 9, 128, 176, 255, 135, 59, 235, 135, 153, 125, 159, 36, 225, 164, 255, 207, 232, 163, 142, 140, 54, 247, 160, 80, 177, 249, 126, 18, 251, 27, 169, 234, 243, 232, 27, 71, 46, 61, 192, 136, 231, 4, 106, 38, 125, 82, 201, 197, 131, 212, 57, 194, 92, 29, 77, 108, 110, 74, 251, 88, 173, 189, 62, 68, 100, 88, 117, 154, 233, 81, 120, 11, 183, 242, 155, 200, 187, 196, 175, 65, 15, 40, 68, 142, 93, 240, 224, 176, 214, 181, 185, 73, 120, 232, 158, 106, 129, 61, 254, 134, 111, 13, 123, 91, 73, 124, 168, 159, 182, 59, 249, 139, 235, 133, 93, 114, 246, 154, 247, 120, 31, 242, 153, 0, 249, 172, 145, 39, 97, 45, 9, 150, 56, 215, 13, 81, 154, 219, 108, 176, 238, 164, 251, 218, 52, 169, 31, 0, 164, 74, 11, 141, 76, 171, 126, 211, 150, 92, 213, 72, 139, 235, 178, 168, 65, 5, 143, 99, 252, 208, 231, 203, 13, 226, 11, 86, 208, 221, 81, 27, 40, 210, 180, 185, 194, 32, 207, 105, 198, 101, 22, 225, 48, 34, 238, 118, 36, 46, 162, 118, 122, 199, 93, 78, 193, 177, 151, 111, 185, 94, 130, 208, 78, 151, 21, 178, 71, 218, 46, 215, 30, 250, 159, 74, 68, 191, 35, 131, 131, 92, 137, 49, 150, 210, 42, 48, 88, 61, 6, 184, 25, 51, 67, 6, 81, 39, 233, 191, 205, 5, 172, 151, 228, 125, 143, 248, 255, 157, 183, 92, 148, 34, 253, 81, 70, 192, 42, 67, 47, 118, 145, 141, 38, 182, 27, 204, 87, 47, 12, 94, 105, 88, 106, 228, 165, 124, 48, 65, 71, 71, 216, 205, 208, 8, 39, 126, 56, 40, 13, 181, 113, 241, 224, 58, 105, 190, 194, 200, 135, 136, 252, 64, 242, 233, 20, 170, 196, 162, 238, 89, 63, 154, 171, 51, 21, 141, 183, 99, 247, 43, 95, 155, 4, 167, 96, 234, 96, 39, 55, 163, 6, 70, 240, 56, 3, 165, 186, 184, 130, 249, 81, 199, 29, 191, 110, 93, 47, 68, 71, 215, 222, 91, 170, 110, 251, 237, 174, 215, 21, 131, 53, 221, 67, 27, 86, 16, 125, 237, 73, 140, 72, 14, 207, 83, 95, 196, 122, 157, 128, 168, 155, 14, 233, 56, 249, 218, 107, 131, 224, 140, 189, 99, 169, 107, 72, 110, 207, 145, 122, 253, 201, 126, 247, 131, 96, 134, 117, 205, 149, 91, 221, 17, 251, 190, 217, 190, 20, 46, 82, 31, 234, 51, 190, 91, 233, 237, 215, 172, 224, 113, 57, 221, 39, 212, 137, 83, 244, 235, 83, 229, 239, 239, 195, 11, 174, 79, 121, 246, 150, 182, 19, 5, 93, 21, 31, 11, 30, 138, 216, 41, 72, 55, 49, 248, 72, 27, 52, 244, 44, 210, 241, 135, 116, 136, 133, 185, 152, 13, 5, 164, 196, 255, 15, 12, 101, 67, 27, 3, 151, 0, 155, 87, 242, 64, 120, 17, 197, 92, 184, 206, 224, 160, 174, 102, 44, 32, 23, 62, 245, 125, 240, 187, 129, 18, 174, 236, 184, 10, 82, 226, 188, 175, 8, 122, 60, 53, 171, 99, 239, 180, 13, 9, 49, 138, 113, 188, 44, 175, 182, 34, 84, 106, 17, 183, 42, 20, 245, 81, 179, 148, 75, 151, 159, 230, 26, 90, 69, 173, 41, 219, 54, 206, 138, 193, 211, 41, 0, 25, 243, 52, 85, 233, 58, 35, 172, 248, 128, 79, 129, 77, 25, 229, 231, 90, 67, 83, 139, 133, 44, 104, 18, 149, 0, 231, 183, 53, 204, 204, 156, 101, 230, 99, 164, 235, 230, 112, 216, 106, 113, 228, 200, 182, 26, 47, 159, 146, 203, 110, 111, 182, 53, 72, 237, 19, 86, 226, 50, 103, 1, 22, 187, 52, 119, 252, 116, 203, 23, 29, 30, 139, 170, 237, 121, 142, 97, 152, 35, 196, 221, 199, 118, 0, 17, 50, 115, 45, 65, 145, 203, 148, 229, 33, 129, 42, 112, 103, 177, 121, 149, 227, 211, 77, 133, 114, 237, 215, 9, 252, 86, 231, 58, 23, 57, 40, 212, 13, 10, 76, 211, 118, 2, 35, 35, 24, 68, 212, 230, 108, 12, 90, 46, 174, 127, 209, 93, 158, 63, 167, 193, 54, 238, 156, 108, 14, 168, 30, 202, 20, 130, 170, 153, 241, 164, 255, 195, 192, 41, 44, 10, 226, 210, 34, 199, 235, 205, 231, 57, 126, 108, 68, 186, 89, 196, 95, 207, 74, 51, 195, 106, 1, 72, 169, 65, 111, 15, 252, 19, 148, 189, 61, 186, 112, 246, 118, 11, 152, 40, 47, 182, 118, 121, 87, 95, 12, 190, 80, 136, 153, 163, 9, 68, 202, 251, 78, 105, 57, 242, 248, 77, 231, 70, 22, 231, 19, 228, 160, 122, 126, 109, 46, 137, 8, 34, 86, 3, 243, 85, 131, 6 },
                            Relationship = 1,
                            SecurityStamp = "95d566e4-9b8a-40ed-9c16-b5814b4bcc90",
                            StateId = 1,
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("949a14ed-2e82-4f5a-a684-a9c7e3ccb52e"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2007, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bd3a970a-7abe-40f0-aaed-5e9e22d96a7f",
                            CountryId = 1,
                            CoverPhoto = new byte[] { 9, 103, 109, 189, 104, 198, 80, 239, 173, 17, 177, 167, 141, 105, 56, 172, 214, 169, 120, 41, 214, 64, 200, 240, 235, 163, 133, 158, 203, 74, 9, 38, 178, 193, 45, 166, 87, 129, 27, 79, 32, 11, 31, 177, 46, 14, 151, 181, 52, 170, 32, 251, 26, 174, 215, 194, 79, 181, 138, 81, 113, 120, 133, 42, 52, 10, 180, 182, 202, 127, 5, 173, 83, 111, 213, 64, 86, 113, 13, 239, 251, 65, 45, 109, 156, 44, 155, 77, 36, 113, 249, 100, 110, 174, 135, 247, 116, 213, 194, 253, 22, 59, 12, 133, 32, 249, 105, 95, 5, 247, 129, 154, 12, 249, 89, 9, 189, 118, 172, 57, 115, 240, 144, 84, 208, 214, 169, 197, 125, 34, 228, 135, 180, 146, 81, 76, 220, 223, 93, 33, 153, 8, 54, 228, 192, 105, 226, 136, 30, 253, 135, 0, 88, 62, 111, 130, 79, 111, 221, 70, 5, 173, 225, 204, 217, 239, 40, 254, 237, 119, 21, 119, 163, 173, 171, 235, 136, 93, 171, 73, 229, 175, 250, 142, 61, 152, 208, 50, 62, 35, 168, 219, 51, 225, 68, 209, 60, 187, 61, 60, 148, 216, 220, 118, 104, 40, 211, 132, 84, 95, 7, 195, 121, 161, 100, 182, 232, 249, 61, 26, 137, 38, 180, 40, 182, 111, 11, 43, 168, 33, 73, 72, 188, 229, 249, 44, 9, 114, 89, 29, 4, 147, 61, 21, 91, 134, 28, 211, 167, 62, 154, 159, 199, 134, 152, 18, 8, 56, 54, 9, 254, 35, 231, 18, 102, 243, 52, 8, 246, 223, 210, 67, 237, 22, 8, 111, 222, 119, 87, 31, 47, 41, 12, 140, 208, 173, 77, 60, 105, 210, 162, 58, 67, 1, 198, 116, 65, 247, 15, 45, 143, 175, 167, 210, 179, 24, 96, 145, 89, 85, 233, 165, 176, 32, 101, 73, 104, 126, 143, 52, 95, 115, 103, 80, 225, 59, 146, 103, 62, 103, 215, 2, 129, 132, 246, 28, 117, 107, 35, 99, 129, 186, 252, 152, 96, 245, 50, 111, 216, 31, 209, 115, 226, 217, 184, 38, 31, 192, 74, 201, 81, 47, 160, 20, 249, 105, 226, 218, 243, 9, 202, 207, 92, 126, 161, 243, 221, 213, 76, 46, 115, 216, 23, 115, 118, 9, 237, 220, 93, 51, 219, 32, 182, 173, 171, 24, 147, 86, 60, 94, 232, 231, 120, 51, 134, 41, 126, 151, 116, 157, 175, 230, 32, 45, 84, 60, 40, 37, 77, 80, 213, 52, 44, 75, 1, 51, 88, 77, 140, 150, 47, 30, 217, 114, 76, 67, 204, 133, 50, 42, 162, 18, 209, 88, 241, 194, 15, 144, 80, 61, 172, 109, 196, 174, 249, 243, 190, 109, 90, 164, 96, 118, 153, 15, 241, 219, 141, 57, 96, 207, 193, 229, 239, 13, 45, 159, 116, 179, 199, 205, 207, 133, 60, 205, 197, 173, 43, 7, 119, 22, 221, 0, 242, 152, 72, 27, 172, 193, 204, 219, 73, 0, 42, 111, 128, 249, 206, 222, 54, 182, 245, 234, 185, 88, 142, 36, 69, 239, 33, 162, 167, 87, 172, 163, 62, 48, 192, 95, 172, 164, 110, 80, 201, 58, 176, 176, 203, 139, 31, 69, 48, 206, 21, 94, 35, 60, 81, 132, 234, 155, 136, 114, 210, 85, 56, 110, 83, 230, 182, 59, 209, 44, 96, 32, 15, 76, 19, 114, 102, 68, 79, 137, 69, 142, 207, 151, 24, 91, 94, 138, 159, 37, 1, 246, 139, 64, 243, 78, 218, 221, 22, 228, 192, 76, 57, 215, 123, 184, 202, 104, 85, 155, 178, 243, 203, 194, 77, 192, 138, 66, 17, 56, 204, 246, 223, 37, 170, 157, 163, 16, 175, 162, 20, 51, 185, 133, 149, 228, 122, 123, 73, 195, 44, 93, 134, 130, 31, 217, 195, 7, 116, 228, 213, 138, 142, 38, 86, 55, 27, 69, 112, 167, 249, 233, 230, 37, 246, 33, 154, 199, 86, 96, 172, 101, 172, 123, 100, 93, 248, 115, 233, 65, 83, 148, 167, 0, 175, 245, 34, 169, 24, 83, 166, 122, 225, 11, 115, 166, 81, 84, 66, 227, 210, 233, 50, 188, 221, 227, 239, 209, 73, 164, 241, 123, 44, 215, 87, 209, 29, 105, 212, 42, 163, 163, 255, 156, 115, 149, 176, 15, 72, 172, 178, 109, 17, 125, 95, 54, 158, 234, 181, 78, 183, 164, 214, 162, 136, 95, 88, 48, 207, 128, 226, 63, 180, 10, 253, 250, 181, 4, 85, 161, 130, 193, 110, 67, 243, 251, 97, 134, 242, 9, 173, 161, 255, 245, 56, 31, 65, 55, 94, 12, 236, 172, 231, 79, 242, 44, 202, 205, 105, 98, 191, 21, 155, 88, 222, 2, 255, 173, 186, 44, 26, 218, 219, 79, 182, 80, 27, 251, 64, 174, 135, 130, 31, 70, 211, 146, 27, 248, 226, 223, 167, 252, 170, 89, 149, 83, 209, 39, 159, 238, 171, 164, 155, 88, 242, 194, 205, 9, 10, 48, 155, 178, 120, 209, 117, 17, 79, 73, 40, 150, 137, 169, 89, 31, 177, 90, 199, 179, 182, 96, 67, 20, 200, 39, 75, 253, 66, 103, 220, 21, 137, 165, 11, 109, 202, 229, 110, 140, 58, 53, 27, 15, 223, 7, 101, 221, 133, 231, 97, 86, 122, 251, 54, 93, 238, 223, 205, 61, 27, 180, 241, 156, 6, 31, 196, 122, 229, 42, 140, 194, 130, 225, 146, 87, 77, 115, 237, 142, 88, 221, 235, 245, 34, 93, 229, 50, 108, 207, 161, 21, 200, 40, 71, 228, 88, 52, 135, 75, 186, 233, 243, 116, 212, 216, 105, 94, 211, 95, 204, 44, 161, 210, 43, 38, 117, 42, 15, 114, 152, 17, 146, 87, 92, 118, 92, 149, 241, 107, 46, 48, 179, 65, 35, 182, 108, 0, 176, 90, 119, 152, 182, 252, 232, 86, 142, 107, 1, 8, 137, 125, 68, 152, 95, 248, 99, 154, 31, 5, 99, 146, 187, 167, 15, 141, 52, 4, 106, 39, 41, 144, 232, 54, 228, 239, 184, 112, 108, 179, 120, 120, 113, 3, 127, 55, 93, 193, 16, 236, 12, 89, 244, 138, 138, 223, 90, 222, 185, 128, 110, 205, 141, 90, 197, 153, 163, 21, 194, 121, 141, 108, 94, 110, 241, 17, 117, 125, 28, 105, 128, 133, 186, 112, 53, 84, 0, 169, 18, 196, 246, 28, 103, 72, 32, 202, 114, 26, 134, 223, 169, 107, 151, 102, 246, 182, 227, 0, 204, 12, 250, 106, 153, 130, 149, 18, 80, 68, 62, 147, 124, 209, 131, 249, 120, 183, 91, 109, 83, 255, 247, 116, 210, 239, 88, 8, 224, 97, 4, 222, 48, 49, 38, 208, 120, 97, 108, 254, 149, 72, 73, 16, 123, 233, 220, 193, 159, 115, 52, 155, 61, 148, 72, 92, 224, 136, 226, 153, 2, 255, 122, 190, 251, 43, 33, 107, 54, 144, 73, 120, 98, 42, 189, 217, 107, 115, 88, 47, 110, 123, 133, 87, 135, 83, 117, 180, 127, 9, 66, 119, 78, 18, 99, 72, 72, 230, 197, 232, 68, 230, 70, 52, 69, 193, 38, 22, 148, 161, 64, 134, 206, 215, 110, 164, 234, 218, 88, 164, 186, 156, 61, 6, 49, 13, 150, 153, 160, 210, 251, 51, 6, 200, 56, 32, 186, 206, 195, 95, 164, 184, 35, 195, 93, 203, 157, 7, 192, 250, 79, 20, 201, 233, 198, 116, 102, 239, 195, 56, 56, 244, 13, 178, 153, 40, 33, 131, 227, 174, 69, 237, 243, 196, 127, 110, 34, 193, 135, 7, 124, 104, 223, 239, 99, 156, 244, 116, 50, 38, 108, 237, 33, 197, 132, 17, 154, 245, 4, 75, 31, 59, 37, 77, 186, 189, 180, 176, 135, 176, 89, 230, 117, 93, 74, 136, 135, 69, 109, 183, 241, 138, 112, 91, 20, 208, 15, 60, 71, 46, 209, 195, 154, 175, 81, 203, 29, 135, 206, 155, 29, 222, 212, 61, 73, 141, 183, 142, 131, 49, 82, 219, 67, 66, 88, 212, 6, 160, 102, 56, 157, 55, 47, 150, 230, 186, 23, 42, 176, 0, 215, 185, 244, 224, 216, 238, 161, 21, 142, 6, 58, 225, 78, 175, 187, 215, 214, 19, 155, 172, 64, 121, 219, 228, 124, 226, 195, 79, 229, 58, 181, 85, 245, 253, 53, 167, 183, 151, 50, 181, 191, 182, 103, 46, 148, 52, 71, 242, 132, 155, 217, 61, 224, 143, 231, 154, 125, 199, 5, 162, 83, 133, 237, 165, 71, 95, 45, 7, 115, 211, 245, 120, 107, 140, 76, 152, 204, 101, 213, 216, 210, 236, 178, 27, 11, 75, 138, 185, 234, 58, 230, 1, 246, 56, 210, 73, 207, 65, 102, 119, 81, 144, 201, 239, 241, 31, 42, 244, 167, 219, 183, 40, 164, 63, 79, 102, 39, 174, 47, 147, 103, 199, 60, 185, 171, 110, 127, 185, 190, 100, 132, 78, 131, 213, 46, 226, 191, 107, 154, 85, 111, 211, 119, 72, 55, 248, 129, 207, 199, 107, 171, 251, 93, 19, 171, 240, 145, 199, 172, 117, 204, 36, 66, 228, 14, 54, 223, 79, 192, 237, 47, 183, 137, 131, 25, 70, 166, 160, 113, 17, 30, 22, 167, 229, 68, 216, 11, 50, 16, 226, 75, 165, 251, 149, 160, 186, 53, 119, 33, 18, 139, 6, 3, 177, 208, 221, 171, 86, 160, 212, 171, 161, 26, 177, 70, 68, 126, 57, 40, 47, 7, 224, 75, 116, 54, 240, 252, 242, 242, 169, 139, 209, 236, 16, 198, 219, 154, 169, 220, 250, 175, 138, 76, 187, 53, 150, 146, 67, 154, 244, 55, 146, 39, 125, 144, 169, 137, 150, 227, 185, 14, 200, 103, 214, 25, 185, 224, 19, 42, 215, 99, 106, 237, 144, 51, 243, 230, 108, 9, 215, 237, 10, 212, 32, 232, 90, 196, 127, 33, 30, 219, 176, 196, 250, 215, 207, 58, 148, 125, 210, 81, 17, 120, 142, 221, 8, 238, 76, 16, 129, 180, 48, 206, 134, 74, 132, 37, 241, 19, 111, 185, 199, 120, 210, 111, 81, 151, 112, 13, 103, 121, 143, 251, 82, 70, 114, 244, 60, 61, 183, 247, 223, 137, 62, 205, 81, 165, 55, 247, 142, 147, 186, 19, 97, 7, 169, 126, 136, 195, 10, 60, 20, 195, 199, 186, 129, 3, 40, 217, 197, 161, 23, 25, 225, 52, 4, 147, 190, 137, 183, 49, 113, 7, 187, 225, 111, 52, 86, 114, 188, 241, 118, 86, 177, 232, 78, 139, 116, 171, 21, 63, 196, 6, 219, 160, 238, 19, 107, 89, 148, 177, 48, 131, 146, 76, 241, 149, 80, 106, 219, 12, 45, 245, 239, 75, 69, 43, 180, 13, 67, 126, 229, 94, 209, 4, 108, 61, 154, 140, 52, 52, 65, 50, 53, 62, 66, 210, 52, 115, 86, 230, 127, 177, 17, 253, 230, 174, 233, 22, 18, 204, 134, 2, 70, 236, 60, 149, 5, 156, 197, 126, 157, 253, 179, 57, 15, 155, 196, 72, 87, 221, 60, 8, 247, 234, 41, 190, 0, 47, 98, 147, 145, 28, 204, 7, 244, 181, 150, 18, 213, 157, 70, 42, 31, 174, 17, 192, 162, 20, 248, 209, 52, 217, 111, 146, 91, 17, 37, 38, 123, 236, 216, 31, 89, 162, 23, 220, 130, 42, 52, 82, 26, 143, 67, 209, 140, 225, 96, 76, 216, 109, 114, 185, 40, 197, 115, 42, 173, 255, 127, 195, 150, 97, 56, 8, 241, 248, 212, 149, 66, 139, 56, 7, 15, 184, 119, 222, 74, 15, 205, 44, 15, 191, 88, 121, 123, 59, 58, 208, 88, 74, 142, 223, 40, 95, 226, 208, 134, 48, 56, 101, 60, 185, 141, 95, 90, 240, 184, 104, 236, 195, 25, 117, 145, 102, 146, 151, 1, 213, 110, 181, 37, 33, 126, 250, 91, 93, 6, 224, 119, 58, 53, 30, 33, 40, 25, 181, 192, 132, 90, 34, 66, 84, 145, 92, 130, 120, 206, 197, 187, 173, 49, 41, 250, 29, 173, 200, 192, 255, 34, 37, 24, 196, 196, 180, 231, 56, 146, 144, 182, 15, 226, 168, 119, 4, 104, 203, 15, 189, 182, 194, 189, 236, 10, 74, 21, 204, 194, 166, 135, 131, 237, 23, 139, 68, 29, 95, 198, 218, 146, 191, 110, 57, 183, 71, 204, 39, 201, 231, 245 },
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            Gender = 0,
                            IsActive = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.com",
                            NormalizedUserName = "ADMIN@ADMIN.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHM25/bLO9QVIvvuE9s4lAn8BmKBwzH/SFCp+duIXj7rjs3md5SnQu9arsoyvClPag==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = new byte[] { 53, 35, 177, 155, 138, 94, 75, 12, 105, 218, 17, 11, 233, 94, 223, 130, 246, 177, 174, 73, 29, 86, 163, 109, 73, 91, 211, 19, 32, 181, 55, 247, 56, 166, 123, 36, 238, 134, 247, 113, 217, 210, 4, 123, 169, 206, 92, 175, 203, 243, 212, 73, 140, 88, 19, 124, 167, 102, 205, 188, 121, 30, 154, 0, 72, 2, 48, 137, 159, 116, 62, 244, 123, 55, 47, 148, 202, 158, 224, 24, 252, 124, 178, 85, 235, 59, 167, 118, 199, 198, 44, 14, 241, 90, 82, 201, 214, 105, 156, 242, 65, 212, 116, 77, 32, 126, 190, 61, 158, 193, 104, 210, 74, 107, 133, 114, 63, 227, 166, 154, 191, 234, 124, 152, 73, 18, 153, 124, 250, 55, 56, 236, 132, 31, 87, 73, 206, 108, 200, 66, 229, 22, 169, 114, 21, 27, 66, 180, 27, 232, 167, 10, 67, 120, 83, 90, 209, 162, 55, 192, 28, 69, 65, 32, 168, 181, 233, 46, 157, 151, 117, 227, 84, 141, 28, 36, 17, 236, 4, 143, 143, 156, 150, 106, 161, 12, 246, 91, 245, 200, 79, 182, 131, 137, 63, 123, 102, 10, 198, 151, 59, 230, 189, 109, 238, 29, 66, 82, 22, 94, 164, 254, 12, 185, 166, 60, 216, 118, 204, 200, 15, 200, 63, 48, 183, 205, 210, 127, 85, 44, 49, 135, 97, 143, 64, 59, 159, 152, 187, 239, 166, 225, 35, 205, 91, 47, 250, 159, 104, 137, 110, 38, 213, 199, 7, 91, 184, 145, 224, 26, 137, 147, 157, 250, 143, 109, 128, 182, 61, 51, 196, 151, 182, 236, 198, 149, 246, 166, 187, 103, 103, 203, 184, 0, 85, 4, 231, 169, 194, 52, 49, 124, 40, 30, 240, 230, 247, 167, 98, 83, 69, 72, 155, 51, 164, 7, 42, 55, 184, 68, 73, 108, 72, 47, 162, 116, 15, 214, 18, 63, 183, 208, 135, 46, 183, 171, 113, 185, 27, 173, 23, 36, 84, 204, 26, 88, 142, 182, 48, 209, 90, 180, 109, 247, 31, 219, 211, 207, 47, 153, 106, 244, 230, 201, 12, 9, 10, 31, 171, 137, 182, 142, 228, 120, 53, 98, 72, 68, 203, 160, 192, 190, 9, 216, 156, 140, 230, 91, 158, 153, 206, 91, 161, 68, 91, 139, 169, 67, 153, 63, 64, 104, 16, 62, 207, 143, 133, 27, 155, 6, 195, 232, 45, 73, 196, 106, 248, 71, 75, 97, 55, 25, 250, 194, 123, 132, 123, 32, 123, 218, 61, 238, 105, 206, 96, 71, 235, 49, 12, 70, 88, 109, 72, 106, 175, 176, 226, 62, 151, 152, 99, 121, 137, 98, 191, 62, 69, 200, 111, 34, 171, 37, 194, 196, 151, 173, 21, 205, 147, 39, 86, 132, 91, 240, 155, 147, 221, 55, 39, 131, 192, 236, 4, 132, 99, 8, 141, 214, 49, 210, 160, 249, 162, 228, 191, 114, 33, 89, 102, 223, 79, 191, 48, 57, 189, 196, 126, 113, 151, 90, 100, 143, 193, 191, 210, 108, 206, 148, 20, 117, 11, 198, 105, 84, 28, 228, 5, 129, 169, 197, 127, 137, 31, 86, 163, 132, 80, 46, 124, 105, 215, 38, 113, 193, 132, 87, 200, 74, 145, 237, 124, 216, 163, 31, 112, 227, 101, 91, 235, 44, 19, 170, 231, 12, 193, 123, 0, 156, 189, 217, 140, 216, 33, 34, 179, 90, 54, 76, 96, 39, 185, 91, 150, 10, 201, 249, 254, 40, 54, 252, 124, 180, 13, 184, 185, 157, 82, 159, 119, 32, 220, 250, 50, 119, 235, 73, 25, 177, 186, 103, 32, 15, 211, 198, 109, 209, 81, 46, 75, 217, 51, 13, 101, 19, 227, 206, 226, 153, 252, 103, 108, 143, 176, 5, 83, 231, 106, 242, 97, 13, 81, 124, 67, 213, 3, 206, 170, 12, 255, 66, 210, 43, 202, 155, 75, 237, 111, 175, 211, 156, 56, 244, 37, 44, 199, 2, 218, 14, 238, 16, 84, 129, 211, 83, 233, 178, 44, 112, 62, 206, 168, 206, 208, 93, 126, 163, 194, 144, 234, 141, 183, 231, 193, 224, 220, 62, 46, 139, 225, 209, 2, 232, 130, 122, 49, 122, 195, 176, 224, 10, 119, 162, 132, 189, 42, 235, 63, 45, 202, 105, 204, 233, 140, 191, 79, 196, 42, 29, 209, 132, 68, 192, 118, 115, 139, 99, 167, 242, 162, 90, 251, 155, 191, 233, 70, 102, 108, 184, 172, 73, 162, 217, 152, 119, 63, 211, 198, 88, 40, 21, 219, 24, 113, 163, 63, 253, 94, 126, 196, 73, 167, 109, 75, 6, 111, 182, 227, 153, 147, 14, 172, 25, 194, 199, 185, 251, 23, 247, 119, 166, 122, 200, 116, 117, 158, 50, 198, 186, 173, 190, 17, 231, 176, 113, 149, 235, 65, 179, 47, 152, 59, 113, 105, 186, 69, 176, 214, 214, 146, 96, 174, 172, 130, 111, 90, 194, 107, 229, 100, 155, 7, 249, 116, 27, 145, 165, 144, 209, 6, 248, 150, 67, 108, 244, 61, 71, 5, 166, 25, 72, 34, 124, 204, 51, 110, 197, 37, 25, 231, 176, 85, 42, 80, 114, 143, 203, 171, 184, 222, 61, 254, 52, 34, 21, 142, 236, 99, 145, 76, 221, 176, 213, 176, 100, 168, 38, 200, 163, 130, 189, 72, 42, 59, 135, 99, 252, 45, 124, 124, 148, 51, 62, 110, 183, 204, 228, 78, 131, 188, 235, 220, 218, 247, 80, 164, 122, 42, 202, 213, 134, 83, 205, 108, 82, 121, 96, 92, 65, 10, 124, 107, 101, 199, 63, 40, 128, 163, 180, 60, 13, 66, 131, 133, 199, 84, 42, 52, 163, 178, 238, 12, 32, 166, 31, 136, 174, 20, 215, 142, 123, 88, 89, 137, 218, 60, 173, 200, 47, 175, 202, 38, 48, 148, 189, 198, 159, 41, 163, 35, 250, 251, 255, 181, 97, 164, 0, 211, 133, 89, 86, 150, 90, 242, 89, 57, 218, 240, 65, 31, 107, 113, 176, 201, 191, 248, 236, 119, 48, 50, 194, 213, 84, 43, 1, 126, 140, 243, 40, 171, 245, 224, 56, 89, 72, 105, 148, 120, 139, 245, 187, 35, 103, 155, 44 },
                            Relationship = 0,
                            SecurityStamp = "66703967-448a-4770-a05b-c8de981b73c8",
                            StateId = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BULGARIA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ENGLAND"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RUSSIA"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JAPAN"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("DataFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublicationId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Publications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("997c5fe6-298a-4729-9fd4-5438043afb7c"),
                            AuthorId = new Guid("949a14ed-2e82-4f5a-a684-a9c7e3ccb52e"),
                            Content = "This is the first seeded publication Content from Ivan",
                            DateCreated = new DateTime(2023, 12, 5, 3, 6, 20, 10, DateTimeKind.Utc).AddTicks(8948)
                        },
                        new
                        {
                            Id = new Guid("f279142a-f8cf-4d18-9c04-8569d079d7b5"),
                            AuthorId = new Guid("6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"),
                            Content = "This is the second seeded publication Content from Georgi",
                            DateCreated = new DateTime(2023, 12, 5, 3, 6, 20, 10, DateTimeKind.Utc).AddTicks(8965)
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ivan Vazov",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Varna"
                        });
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.UserSchool", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SchoolId");

                    b.HasIndex("SchoolId");

                    b.ToTable("UserSchools");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany("Friends")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AI_Social_Platform.Data.Models.Country", "Country")
                        .WithMany("UsersInThisCountry")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.State", "State")
                        .WithMany("UsersInThisState")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Media", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("MediaFiles")
                        .HasForeignKey("PublicationId");

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Comment", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.Publication.Publication", "Publication")
                        .WithMany("Comments")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "Author")
                        .WithMany("Publications")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.UserSchool", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.School", "School")
                        .WithMany("UserSchools")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", "User")
                        .WithMany("UserSchools")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AI_Social_Platform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Publications");

                    b.Navigation("UserSchools");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Country", b =>
                {
                    b.Navigation("UsersInThisCountry");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.Publication.Publication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.School", b =>
                {
                    b.Navigation("UserSchools");
                });

            modelBuilder.Entity("AI_Social_Platform.Data.Models.State", b =>
                {
                    b.Navigation("UsersInThisState");
                });
#pragma warning restore 612, 618
        }
    }
}
